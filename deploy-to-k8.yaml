apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookernel
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookernel
  template:
    metadata:
      labels:
        app: zookernel
    spec:
      containers:
      - name: zookernel
        image: djayzen/zookernel:latest
        # command: [ "/startUp.sh" ]
        # args: ["--port=8888", "/websocketd/shell.sh"]
        ports:
          - containerPort: 80
        env:
        - name: ZOO_REDIS_HOST
          value: redis
        volumeMounts:
        - name: zookernel-volume
          mountPath: ./docker/main.cfg:/usr/lib/cgi-bin/main.cfg
        - name: zookernel-volume
          mountPath: ./docker/oas.cfg:/usr/lib/cgi-bin/oas.cfg
        - name: zookernel-volume
          mountPath: ./docker/default.conf:/etc/apache2/sites-available/000-default.conf
        - name: zookernel-volume
          mountPath: ./zoo-project/zoo-services/echo-py/cgi-env/echo_service.py:/usr/lib/cgi-bin/echo_service.py
        - name: zookernel-volume
          mountPath: ./zoo-project/zoo-services/echo-py/cgi-env/echo.zcfg:/usr/lib/cgi-bin/echo.zcfg
        - name: zookernel-volume
          mountPath: ./zoo-project/zoo-services/utils/open-api/server/publish.py:/usr/lib/cgi-bin/publish.py
        - name: zookernel-volume
          mountPath: ./zoo-project/zoo-services/utils/open-api/server/subscriber.py:/usr/lib/cgi-bin/subscriber.py
        - name: zookernel-volume
          mountPath: ./docker/.htaccess:/var/www/html/.htaccess
        - name: zookernel-volume
          mountPath: ./zoo-project/zoo-services/utils/open-api/templates/index.html:/var/www/index.html
        - name: zookernel-volume
          mountPath: ./zoo-project/zoo-services/utils/open-api/static:/var/www/html/static
        - name: zookernel-volume
          mountPath: ./docker/com:/usr/com/zoo-project
        - name: zookernel-volume
          mountPath: ./docker/tmp:/tmp/zTmp
        - name: zookernel-volume
          mountPath: ./docker/ws2022:/usr/lib/cgi-bin/ws2022
        - name: zookernel-volume
          mountPath: ./zoows2022/zoo-demo:/var/www/html/zoows-2022/
        - name: zookernel-volume
          mountPath: ./zoows2022/data:/var/data
      volumes:
      - name: zookernel-volume
        persistentVolumeClaim:
          claimName: zookernel-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: zookernel
  labels:
    app: zookernel
spec:
  type: LoadBalancer
  ports:
  - port: 80
    name: zookernel
  selector:
    app: zookernel
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: zookernel-pv-claim
  labels:
    app: zookernel
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zoofpm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zoofpm
  template:
    metadata:
      labels:
        app: zoofpm
    spec:
      containers:
      - name: zoofpm
        image: djayzen/zookernel:latest
        command: [ "/startUp.sh" ]
        # args: ["--port=8888", "/websocketd/shell.sh"]
        ports:
          - containerPort: 80
        env:
        - name: ZOO_RABBITMQ_HOST
          value: rabbitmq
        volumeMounts:
        - name: zoofpm-volume
          mountPath: ./docker/main.cfg:/usr/lib/cgi-bin/main.cfg
        - name: zoofpm-volume
          mountPath: ./docker/oas.cfg:/usr/lib/cgi-bin/oas.cfg
        - name: zoofpm-volume
          mountPath: ./docker/tmp:/tmp/zTmp
        - name: zoofpm-volume
          mountPath: ./docker/com:/usr/com/zoo-project
        - name: zoofpm-volume
          mountPath: ./docker/ws2022:/usr/lib/cgi-bin/ws2022
        - name: zoofpm-volume
          mountPath: ./zoows2022/zoo-demo:/var/www/html/zoows-2022/
        - name: zoofpm-volume
          mountPath: ./zoows2022/data:/var/data
      volumes:
      - name: zoofpm-volume
        persistentVolumeClaim:
          claimName: zoofpm-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: zoofpm
  labels:
    app: zoofpm
spec:
  type: LoadBalancer
  ports:
  - port: 80
    name: zoofpm
  selector:
    app: zoofpm
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: zoofpm-pv-claim
  labels:
    app: zoofpm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: websocketd
spec:
  replicas: 1
  selector:
    matchLabels:
      app: websocketd
  template:
    metadata:
      labels:
        app: websocketd
    spec:
      containers:
      - name: websocketd
        image: zoocr.azurecr.io/zoo-project-websocketd:v1
        # command: ["/websocketd/websocketd"]
        # args: ["--port=8888", "/websocketd/shell.sh"]
        ports:
          - containerPort: 8888
        env:
        - name: ZOO_REDIS_HOST
          value: redis
        volumeMounts:
        - name: websocketd-volume
          #questionable?!
          mountPath: ./zoo-project/zoo-services/utils/open-api/server/subscriber.py:/shell.py
      volumes:
      - name: websocketd-volume
        persistentVolumeClaim:
          claimName: websocketd-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: websocketd
  labels:
    app: websocketd
spec:
  ports:
  - port: 8888
    name: websocketd
  selector:
    app: websocketd
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: websocketd-pv-claim
  labels:
    app: websocketd
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgbouncer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgbouncer
  template:
    metadata:
      labels:
        app: pgbouncer
    spec:
      containers:
      - name: pgbouncer
        image: edoburu/pgbouncer:1.12.0
        ports:
          - containerPort: 5432
        env:
        - name: DATABASE_URL
          value: "postgres://zoo:zoo@pg/zoo"
        - name: MAX_CLIENT_CONN
          value: "1000"
        - name: MAX_DB_CONNECTIONS
          value: "100"
        - name: DEFAULT_POOL_SIZE
          value: "100"
        - name: POOL_MODE
          value: transaction
---
apiVersion: v1
kind: Service
metadata:
  name: pgbouncer
  labels:
    app: pgbouncer
spec:
  ports:
  - port: 5432
    name: pgbouncer
  selector:
    app: pgbouncer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pg
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pg
  template:
    metadata:
      labels:
        app: pg
    spec:
      restartPolicy: Always
      containers:
      - name: pg
        image: postgres:12.10-alpine
        ports:
          - containerPort: 5432
        env:
        - name: zoo
          value: zoo
        - name: POSTGRES_PASSWORD
          value: zoo
        - name: POSTGRES_DB
          value: zoo
        volumeMounts:
        - name: pg-volume
          mountPath: ./zoo-project/zoo-kernel/sql/schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
        - name: pg-volume
          mountPath: ./zoo-project/zoo-kernel/sql/async_amqp.sql:/docker-entrypoint-initdb.d/2-schema.sql
      volumes:
      - name: pg-volume
        persistentVolumeClaim:
          claimName: pg-pv-claim
      - name: async-amqp
        persistentVolumeClaim:
          claimName: pg-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: pg
  labels:
    app: pg
spec:
  ports:
  - port: 5432
    name: pg
  selector:
    app: pg
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pg-pv-claim
  labels:
    app: pg
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:6.0.9
        ports:
          - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  labels:
    app: redis
spec:
  ports:
    - port: 6379
      targetPort: 6379
  selector:
    app: redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabitmq
  template:
    metadata:
      labels:
        app: rabitmq
    spec:
      containers:
      - name: rabitmq
        image: rabbitmq:3.8.9-management-alpine
        ports:
        - containerPort: 15672
          name: rabitmqv3
        - containerPort: 5672
          name: rabitmqv2
        volumeMounts:
        - name: rabitmq-persistent-storage
          mountPath: ./docker/definitions.json:/etc/rabbitmq/definitions.json
      volumes:
      - name: rabitmq-persistent-storage
        persistentVolumeClaim:
          claimName: rabitmq-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: rabitmq
  labels:
    app: rabitmq
spec:
  ports:
  - port: 15672
    name: rabitmqv3
  - port: 5672
    name: rabitmqv2
  selector:
    app: rabitmq
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rabitmq-pv-claim
  labels:
    app: rabitmq
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi